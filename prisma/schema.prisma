// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS for better type safety
enum UserRole {
  USER
  EXPERT
  ADMIN
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MESSAGE
  OTHER
}

model Admin {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(ADMIN)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  name              String
  role              UserRole            @default(USER) // USER, EXPERT
  bio               String?
  avatar            String?
  interests         String[]            // Array of user interests
  tags              String[]            // Array of user tags
  location          Json?               // Location object with optional fields
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  expertDetails     ExpertDetails?

  followers         Follow[]            @relation("UserFollowers")
  following         Follow[]            @relation("UserFollowing")
  notifications     Notification[]      @relation("ReceivedNotifications")
  sentNotifications Notification[]      @relation("SentNotifications")
  admin             Admin?

  @@index([email])
}

model ExpertDetails {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  headline      String?       // Professional headline/title
  summary       String?       // Professional summary
  expertise     String[]      // Skills array
  experience    Int          // Years of experience
  hourlyRate    Float
  about         String
  availability  String?       // Available hours/days
  languages     String[]      // Languages known
  certifications Certificate[]
  experiences   Experience[]
  awards        Award[]
  education     Education[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Certificate {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  name            String        // Certificate name
  issuingOrganization String    // Organization that issued the certificate
  issueDate       DateTime
  expiryDate      DateTime?
  credentialId    String?       // Certificate ID/URL
  credentialUrl   String?       // URL to verify the certificate
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Experience {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  title           String        // Job title
  company         String        // Company name
  location        String?       // Work location
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean       @default(false)
  description     String?       // Job description
  skills          String[]      // Skills used in this role
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Award {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  title           String        // Award title
  issuer          String        // Organization that gave the award
  date            DateTime
  description     String?       // Award description
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Education {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  school          String        // School/University name
  degree          String        // Degree name
  fieldOfStudy    String        // Major/Field of study
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean       @default(false)
  description     String?       // Additional details
  grade           String?       // GPA/Grade
  activities      String?       // Extracurricular activities
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  image       String?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  tags        Tag[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([authorId])
}

model Comment {
  id          String     @id @default(uuid())
  content     String
  postId      String
  post        Post       @relation(fields: [postId], references: [id])
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Follow {
  id            String     @id @default(uuid())
  followerId    String
  followingId   String
  follower      User       @relation("UserFollowing", fields: [followerId], references: [id])
  following     User       @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Tag {
  id          String     @id @default(uuid())
  name        String     @unique
  posts       Post[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Like {
  id          String     @id @default(uuid())
  postId      String
  post        Post       @relation(fields: [postId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Notification {
  id            String             @id @default(uuid())
  type          NotificationType
  content       String
  read          Boolean            @default(false)
  recipientId   String
  senderId      String
  recipient     User               @relation("ReceivedNotifications", fields: [recipientId], references: [id])
  sender        User               @relation("SentNotifications", fields: [senderId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([recipientId])
  @@index([senderId])
}
