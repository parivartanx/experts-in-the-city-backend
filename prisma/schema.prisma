// prisma/schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ENUMS for better type safety
enum UserRole {
  USER
  EXPERT
  ADMIN
}

enum BadgeType {
  VERIFIED_EXPERT
  TOP_RATED
  RISING_EXPERT
  IN_DEMAND
  ELITE_EXPERT
  MULTICITY_EXPERT
  QUICK_RESPONDER
  COMMUNITY_CONTRIBUTOR
  SPECIALIST
  VERSATILE_PRO
}

enum ProgressLevel {
  BRONZE
  SILVER
  GOLD
  PLATINUM
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
  MESSAGE
  MESSAGE_SCHEDULE
  BADGE_EARNED
  SUGGESTION
  OTHER
}

enum SatisfactionLevel {
  VERY_DISSATISFIED
  DISSATISFIED
  NEUTRAL
  SATISFIED
  VERY_SATISFIED
}

enum Expertise {
  TECHNOLOGY
  BUSINESS
  HEALTHCARE
  EDUCATION
  ARTS
  SCIENCE
  ENGINEERING
  LAW
  FINANCE
  MARKETING
  DESIGN
  MEDIA
  SPORTS
  CULINARY
  LANGUAGES
  PSYCHOLOGY
  ENVIRONMENT
  AGRICULTURE
  CONSTRUCTION
  HOSPITALITY
  RETAIL
  TRANSPORTATION
  ENTERTAINMENT
  NON_PROFIT
  GOVERNMENT
  OTHER
}

model Admin {
  id          String   @id @default(uuid())
  email       String   @unique
  password    String
  name        String
  role        UserRole @default(ADMIN)
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  password          String
  name              String
  role              UserRole            @default(USER) // USER, EXPERT
  bio               String?
  avatar            String?
  interests         Expertise[]         // Array of expertise enum
  tags              String[]            // Array of user tags
  location          Json?               // Location object with optional fields
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  posts             Post[]
  comments          Comment[]
  likes             Like[]
  replies           Reply[]
  expertDetails     ExpertDetails?
  givenReviews      SessionReview[]     @relation("UserReviews")

  followers         Follow[]            @relation("UserFollowers")
  following         Follow[]            @relation("UserFollowing")
  notifications     Notification[]      @relation("ReceivedNotifications")
  sentNotifications Notification[]      @relation("SentNotifications")
  admin             Admin?

  @@index([email])
}

model ExpertDetails {
  id            String        @id @default(uuid())
  userId        String        @unique
  user          User          @relation(fields: [userId], references: [id])
  headline      String?       // Professional headline/title
  summary       String?       // Professional summary
  expertise     Expertise[]   // Array of expertise enum
  experience    Int          // Years of experience
  hourlyRate    Float
  about         String
  availability  String?       // Available hours/days
  languages     String[]      // Languages known
  certifications Certificate[]
  verified        Boolean       @default(false)
  experiences   Experience[]
  awards        Award[]
  education     Education[]
  badges        BadgeType[]
  progressLevel ProgressLevel @default(BRONZE)
  progressShow  Boolean       @default(true)
  ratings       Float         @default(0) // Average rating from reviews
  reviews       SessionReview[] // Add reviews relation
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Certificate {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  name            String        // Certificate name
  issuingOrganization String    // Organization that issued the certificate
  issueDate       DateTime
  expiryDate      DateTime?
  credentialId    String?       // Certificate ID/URL
  credentialUrl   String?       // URL to verify the certificate
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Experience {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  title           String        // Job title
  company         String        // Company name
  location        String?       // Work location
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean       @default(false)
  description     String?       // Job description
  skills          String[]      // Skills used in this role
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Award {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  title           String        // Award title
  issuer          String        // Organization that gave the award
  date            DateTime
  description     String?       // Award description
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Education {
  id              String        @id @default(uuid())
  expertId        String
  expert          ExpertDetails @relation(fields: [expertId], references: [id])
  school          String        // School/University name
  degree          String        // Degree name
  fieldOfStudy    String        // Major/Field of study
  startDate       DateTime
  endDate         DateTime?
  isCurrent       Boolean       @default(false)
  description     String?       // Additional details
  grade           String?       // GPA/Grade
  activities      String?       // Extracurricular activities
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  @@index([expertId])
}

model Post {
  id          String     @id @default(uuid())
  title       String
  content     String
  image       String?
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  comments    Comment[]
  likes       Like[]
  tags        Tag[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([authorId])
}

model Comment {
  id          String     @id @default(uuid())
  content     String
  postId      String
  post        Post       @relation(fields: [postId], references: [id])
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  replies     Reply[]    // Add replies relation
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([postId])
  @@index([authorId])
}

model Reply {
  id          String     @id @default(uuid())
  content     String
  commentId   String
  comment     Comment    @relation(fields: [commentId], references: [id])
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@index([commentId])
  @@index([authorId])
}

model Follow {
  id            String     @id @default(uuid())
  followerId    String
  followingId   String
  follower      User       @relation("UserFollowing", fields: [followerId], references: [id])
  following     User       @relation("UserFollowers", fields: [followingId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Tag {
  id          String     @id @default(uuid())
  name        String     @unique
  posts       Post[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Like {
  id          String     @id @default(uuid())
  postId      String
  post        Post       @relation(fields: [postId], references: [id])
  userId      String
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}

model Notification {
  id            String             @id @default(uuid())
  type          NotificationType
  content       String
  read          Boolean            @default(false)
  recipientId   String
  senderId      String
  recipient     User               @relation("ReceivedNotifications", fields: [recipientId], references: [id])
  sender        User               @relation("SentNotifications", fields: [senderId], references: [id])
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt

  @@index([recipientId])
  @@index([senderId])
}

model SessionReview {
  id              String            @id @default(uuid())
  sessionId       String?
  reviewerId      String
  expertId        String
  rating          Float             // Rating out of 5 (supports decimal values like 4.5)
  satisfaction    SatisfactionLevel?
  remarks         String?
  reviewer        User              @relation("UserReviews", fields: [reviewerId], references: [id])
  expert          ExpertDetails     @relation(fields: [expertId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@index([reviewerId])
  @@index([expertId])
}

model Category {
  id          String        @id @default(uuid())
  name        String        @unique
  subcategories Subcategory[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Subcategory {
  id          String    @id @default(uuid())
  name        String
  categoryId  String
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([name, categoryId])
  @@index([categoryId])
}
